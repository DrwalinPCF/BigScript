#!/bin/bash
# Author           : Marek Zalewski ( s180465@student.pg.edu.pl )
# Created On       : 23/04/2020
# Last Modified By : Marek Zalewski
# Last Modified On : 27/05/2020
# Version          : 1.0.0
# Name             : organizer
#
# Description      :
# Duży skrypt z systemów operacyjnych: task scheduler
#
# Licensed under GPL (see /usr/share/common-licenses/GPL for more details
# or contact # the Free Software Foundation for a copy)

configPath="$HOME/.organizer"
fileWithSchedule="$configPath/taskSchedule"
configFile="$configPath/configFile"

workTime=60
breakTime=15;






prepare_date() {
	echo $1 | sed -E 's/^([0-9]+-[0-9]+-[0-9]+)-([0-9]+)-([0-9]+)$/\1 \2\:\3/g'
}

get_current_date() {
	date -d 'now' +%F-%H-%M
}

get_modification_date_formatted() {
	echo $1 | sed -E 's/^([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)-([0-9i]+)$/+ \1 years + \2 months + \3 days + \4 hours + \5 minutes + -1 minutes/g'
}

get_next_valid_date() {
	local currentDate=$(get_current_date)
	local savedDate="$1"
	local modificationString=$(get_modification_date_formatted $2)
	while [[ "$savedDate" < "$currentDate" ]];
	do
		local newDate="$(prepare_date "$savedDate") minutes"
		savedDate=`date -d "$newDate $modificationString" +%F-%H-%m`
	done
	echo "$savedDate"
}

proceed_with_event() {
	local mode=$2
	if [[ "$mode" == "event" ]]; then
		mode="Wydarzenie jednorazowe"
	else
		mode="Wydarzenie okresowe co: "$(prepare_date $mode)
	fi
	local message="$mode \nwystąpiło: $(prepare_date $1) \n$3"
	
	zenity --notfication --title "Wydarzenie" --text="message" &
	
	if [[ "$2" != "event" ]]; then
		local newDate=$(get_next_valid_date $1 $2)
		echo "$newDate $2 $3"
	else
		echo ""
	fi
}

daemon_function() {
	local line=""
	local tmpFile="/tmp/$0.organizerFileWithSchedule.$$"
	while read line;
	do
		if [[ "$line" != "" ]]; then
			local timeStamp=`echo $line | sed -E 's/^([^ ]+) .*$/\1/g'`
			local mode=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) .*$/\2/g'`
			local text=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) (.*)$/\3/g'`
			
			local eventReplacer=$(proceed_with_event $timeStamp $mode $text)
			if [[ "$eventReplacer" != "" ]]; then
				echo "$eventReplacer" >> "$tmpFile"
			fi
		fi
	done < "$fileWithSchedule"
	
	
	for line in $(seq 0 $entries);
	do
		eventDone=$(proceed_with_event)
		local found="0"
		for element in "${resultsArray[@]}"
		do
			if [[ "$element" == "$line" ]]; then
				found="1"
			fi
		done
		if [[ "$found" == "0" ]]; then
			echo "${eventsList[$(( $line*6 + 0 ))]} ${eventsList[$(( $line*6 + 2 ))]} ${eventsList[$(( $line*6 + 5 ))]}" >> "$fileWithSchedule"
		fi
	done
	
	mv "$tmpFile" "$fileWithSchedule"
	
	sleep 60
}





list_events() {
	local lineNumber=0
	local line=""
	local eventsList=()
	while read line;
	do
		if [[ "$line" != "" ]]; then
			local timeStamp=`echo $line | sed -E 's/^([^ ]+) .*$/\1/g'`
			local mode=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) .*$/\2/g'`
			local text=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) (.*)$/\3/g'`
			
			eventsList[$(( lineNumber*3 ))]=$(prepare_date $timeStamp)
			if [[ "$mode" == "event" ]]; then
				mode="Wydarzenie jednorazowe"
			else
				mode="Wydarzenie okresowe: "$(prepare_date $mode)
			fi
			
			eventsList[$(( lineNumber*3 + 1 ))]=$mode
			eventsList[$(( lineNumber*3 + 2 ))]=$text
			
			lineNumber=$(($lineNumber+1))
		fi
	done < "$fileWithSchedule"
	
	zenity --list --title "Lista wydarzeń" --column="Data" --column="Rodzaj" --column="Treść" "${eventsList[@]}"
}

remove_events() {
	local lineNumber=0
	local line=""
	local eventsList=()
	while read line;
	do
		if [[ "$line" != "" ]]; then
			local timeStamp=`echo $line | sed -E 's/^([^ ]+) .*$/\1/g'`
			local mode=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) .*$/\2/g'`
			local text=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) (.*)$/\3/g'`
			
			eventsList[$(( lineNumber*6 + 1 ))]=$lineNumber
			eventsList[$(( lineNumber*6 + 0 ))]=$timeStamp
			eventsList[$(( lineNumber*6 + 2 ))]=$mode
			
			eventsList[$(( lineNumber*6 + 3 ))]=$(prepare_date $timeStamp)
			if [[ "$mode" == "event" ]]; then
				mode="Wydarzenie jednorazowe"
			else
				mode="Wydarzenie okresowe: "$(prepare_date $mode)
			fi
			
			eventsList[$(( lineNumber*6 + 4 ))]=$mode
			eventsList[$(( lineNumber*6 + 5 ))]=$text
			
			lineNumber=$(($lineNumber+1))
		fi
	done < "$fileWithSchedule"
	local entries=$lineNumber
	
	local result=`zenity --list --checklist --title "Wybierz wydarzenia do usunięcia" "--column=" "--column=TimeStamp" "--column=HiddenMode" "--column=Data" "--column=Rodzaj" "--column=Treść" "${eventsList[@]}" --hide-column=2,3`
	
	if [[ "$result" != "" ]]; then
		local resultsArray=()
		IFS="|" read -r -a resultsArray <<< "$result" 
		
		local tmpFile="/tmp/$0.organizerFileWithSchedule.$$"
		
		for line in $(seq 0 $entries);
		do
			local found="0"
			for element in "${resultsArray[@]}"
			do
				if [[ "$element" == "$line" ]]; then
					found="1"
				fi
			done
			if [[ "$found" == "0" ]]; then
				echo "${eventsList[$(( $line*6 + 0 ))]} ${eventsList[$(( $line*6 + 2 ))]} ${eventsList[$(( $line*6 + 5 ))]}" >> "$tmpFile"
			fi
		done
		
		mv "$tmpFile" "$fileWithSchedule"
	fi
}

get_number() {
	local number=""
	while [[ "$(echo $number | sed -E 's/^([0-9]+)$/\1/g')" == "" ]]; do
		number=`zenity --entry --title "$1" --text="$2"`
	done
	echo $number
}

add_event() {
	local date=`zenity --calendar --title "Data" --text="Wybierz datę wydarzenia" --date-format='%Y-%m-%d'`
	local hour=`zenity --scale --title "Godzina" --text="Wybierz godzinę wydarzenia" --min-value=0 --max-value=23 --step=1`
	local minute=`zenity --scale --title "Minuta" --text="Wybierz minutę wydarzenia" --min-value=0 --max-value=59 --step=1`
	local text=`zenity --entry --title "Treść wydarzenia" --text="Napisz o czym jest wydarzenie"`
	local mode="event"
	if zenity --question --title "Typ wydarzenia" --text="Czy wydarzenie ma być okresowe?"
	then
		local years=`get_number "Lata" "Co ile lat ma się powtarzać wydarzenie?"`
		local months=`zenity --scale --title "Miesiące" --text="Co ile miesięcy ma się powtarzać wydarzenie?" --min-value=0 --max-value=11 --step=1`
		local days=`zenity --scale --title "Dni" --text="Co ile dni ma się powtarzać wydarzenie?" --min-value=0 --max-value=366 --step=1`
		local hours=`zenity --scale --title "Godziny" --text="Co ile godzin ma się powtarzać wydarzenie?" --min-value=0 --max-value=23 --step=1`
		local minutes=`zenity --scale --title "Minuty" --text="Co ile minut ma się powtarzać wydarzenie?" --min-value=0 --max-value=59 --step=1`
		mode="$years-$months-$days-$hours-$minutes"
	fi
	date=$date"-"$hour"-"$minute
	echo "$date $mode $text" >> "$fileWithSchedule"
	
	local tmpFile="/tmp/$0.organizerFileWithSchedule.$$"
	
	cat "$fileWithSchedule" | sort > "$tmpFile"
	
	mv "$tmpFile" "$fileWithSchedule"
}

is_daemon_running() {
	local daemonProcess=$(ps ax | grep 'organizer startdaemon' | grep -v "grep")
	if [[ "$daemonProcess" == "" ]]; then
		echo "0"
	else
		echo "1"
	fi
}

kill_daemon() {
	local daemonProcess=$(ps ax | grep 'organizer startdaemon' | grep -v "grep")
	local line=""
	while read line;
	do
		local daemonPID=`echo $line | sed -E 's/^[^0-9]*([0-9]+).*$/\1/g'`
		if [[ "$daemonPID" != "" ]]; then
			kill "$daemonPID"
		fi
	done <<< "$daemonProcess"
}




main_menu() {
	local menuList=()
	if [[ "$(is_daemon_running)" == "0" ]]; then
		menulist=("exit" "Wyjscie"  "ls" "Pokaz liste wydarzeń"  "rm" "Usuń wydarzenie"  "add" "Dodaj wydarzenie"  "startdaemon" "Uruchom daemona")
	else
		menulist=("exit" "Wyjście"  "killdaemon" "Wyłącz daemona - aby móc modyfikować lub wyświetlić listę wydarzeń")
	fi
	local option=`zenity --list --title "Main Menu" --column=Hidden --column=Opcje "${menulist[@]}" --hide-column=1`
	case $option in
		"exit"|"")
			exit
			;;
		"ls")
			list_events
			;;
		"rm")
			remove_events
			;;
		"add")
			add_event
			;;
		"startdaemon")
			$0 startdaemon & > /dev/null 2>&1
			;;
		"killdaemon")
			kill_daemon
			;;
	esac
}

create_config_file() {
	echo  $workTime > $configFile
	echo $breakTime >> $configFile
}

load_config() {
	if [[ ! (-d $configPath) ]]; then
		`eval "mkdir $configPath"`
	fi
	if [[ ! (-e "$configFile" && -f "$configFile") ]]; then
		create_config_file
	else
		exec 5< "$configFile"
			read workTime <&5
			read breakTime <&5
		exec 5<&-
	fi
}

load_config

case $1 in
	"startdaemon")
		while [[ "1" == "1" ]]
		do
			daemon_function
		done
		;;
	"-v"|"--version")
		
		;;
	"-h"|"--help"|"?"|"help")
		
		;;
	*)
		while [[ "1" == "1" ]]
		do
			main_menu
		done
		;;
esac










exit

# read from file line by line
input="script.sh"
lineNumber=1
while IFS= read -r line
do
	echo "$lineNumber"": $line"
	lineNumber=$(($lineNumber+1))
done < "$input"

# start daemon:
setsid

# process:
fork()

# get current date:
currentDate=`printf '%(%Y-%m-%d)T\n' -1`
modifiedGivenDate=`date -d '2000-02-10 02:00 minutes + 25 minutes + 3 hours + 2 days + 2 months + 2 years + -1 minutes' +%F-%H-%M`
modifiedDate=`date -d 'now + 25 minutes + 3 hours + 2 days + 2 months + 2 years' +%F-%H-%M`

# get date from zenity:
selectedDate=`zenity --calendar --date-format='%Y-%m-%d'`

# overwrite file:
 echo ... > file

# append to file:
echo ... >> file


# get process by PID:
ps ax | grep "^ *$PID"

# kill process by pid:
kill $PID

# create process and get PID
function_or_script_to_call &
pid=$!



