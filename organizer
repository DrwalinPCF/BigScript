#!/bin/bash
# Author           : Marek Zalewski ( s180465@student.pg.edu.pl )
# Created On       : 23/04/2020
# Last Modified By : Marek Zalewski
# Last Modified On : 24/05/2020
# Version          : 1.0.0
# Name             : organizer
#
# Tested and created on: Arch Linux 5.6.3-arch1-1
#
# Description      :
# Duży skrypt z systemów operacyjnych: organizer
#
# Licensed under GPL (see /usr/share/common-licenses/GPL for more details
# or contact # the Free Software Foundation for a copy)

configPath="$HOME/.organizer"
fileWithSchedule="$configPath/taskSchedule"
tmpFilenameUniquer=$$

create_tmp_file_name() {
	tmpFilenameUniquer=$(($tmpFilenameUniquer+13))
	echo "/tmp/$$.$tmpFilenameUniquer"".tmp"
}

prepare_date() {
	echo $1 | sed -E 's/^([0-9]+-[0-9]+-[0-9]+)-([0-9]+)-([0-9]+)$/\1 \2:\3/g'
}

prepare_period_time() {
	local years=$(echo "$1" | sed -E 's/^([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)$/\1/g')
	local months=$(echo "$1" | sed -E 's/^([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)$/\2/g')
	local days=$(echo "$1" | sed -E 's/^([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)$/\3/g')
	local hours=$(echo "$1" | sed -E 's/^([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)$/\4/g')
	local minutes=$(echo "$1" | sed -E 's/^([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)$/\5/g')
	if [[ "$(($years + 0))" -ne "0" ]]; then
		years="$years years"
	else
		years=""
	fi
	
	if [[ "$(($months + 0))" -ne "0" ]]; then
		months="$months months"
	else
		months=""
	fi
	
	
	if [[ "$(($hours + 0))" -ne "0" ]]; then
		hours="$hours hours"
	else
		hours=""
	fi
	
	if [[ "$(($days + 0))" -ne "0" ]]; then
		days="$days days"
	else
		days=""
	fi
	
	if [[ "$(($minutes + 0))" -ne "0" ]]; then
		minutes="$minutes minuts"
	else
		minutes=""
	fi
	
	echo "$years $months $days $hours $minutes"
}

prepare_period_time_full() {
	echo "$1" | sed -E 's/^([0-9]+-[0-9]+-[0-9]+)-([0-9]+)-([0-9]+)$/\1 \2 hours \3 minutes/g'
}

get_current_date() {
	date -d 'now' +%F-%H-%M
}

get_modification_date_formatted() {
	echo "$1" | sed -E 's/^([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)$/+ \1 years + \2 months + \3 days + \4 hours + \5 minutes /g'
}

get_next_valid_date() {
	local currentDate=$(get_current_date)
	local savedDate="$1"
	local modificationString=$(get_modification_date_formatted $2)
	while [[ "$savedDate" < "$currentDate" ]];
	do
		local newDate="$(prepare_period_time_full "$savedDate")"
		savedDate=`date -d "$newDate $modificationString" +%F-%H-%M`
	done
	echo "$savedDate"
}

proceed_with_event() {
	local mode=$2
	if [[ "$mode" == "event" ]]; then
		mode="Wydarzenie jednorazowe"
	else
		mode="Wydarzenie okresowe co: "$(prepare_period_time $mode)
	fi
	local message="$mode \nwystąpiło: $(prepare_date $1) \n$3"
	
	zenity --info --title "Wydarzenie" --text="$message" --width=256
	
	if [[ "$2" != "event" ]]; then
		local newDate=$(get_next_valid_date $1 $2)
		echo "$newDate $2 $3"
	else
		echo ""
	fi
}

daemon_function() {
	local line=""
	local currentDate=$(get_current_date)
	local tmpFile=$(create_tmp_file_name)
	while read line;
	do
		if [[ "$line" != "" ]]; then
			local timeStamp=`echo $line | sed -E 's/^([^ ]+) .*$/\1/g'`
			local mode=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) .*$/\2/g'`
			local text=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) (.*)$/\3/g'`
			
			if [[ "$timeStamp" < "$currentDate" ]]; then
				local eventReplacer=$(proceed_with_event "$timeStamp" "$mode" "$text")
				if [[ "$eventReplacer" != "" ]]; then
					echo "$eventReplacer" >> "$tmpFile"
				fi
			else
				echo "$line" >> "$tmpFile"
			fi
		fi
	done < "$fileWithSchedule"
	
	mv "$tmpFile" "$fileWithSchedule"
	
	sleep 60
}





list_events() {
	local lineNumber=0
	local line=""
	local eventsList=()
	while read line;
	do
		if [[ "$line" != "" ]]; then
			local timeStamp=`echo $line | sed -E 's/^([^ ]+) .*$/\1/g'`
			local mode=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) .*$/\2/g'`
			local text=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) (.*)$/\3/g'`
			
			eventsList[$(( lineNumber*3 ))]=$(prepare_date $timeStamp)
			if [[ "$mode" == "event" ]]; then
				mode="Wydarzenie jednorazowe"
			else
				mode="Wydarzenie okresowe co: "$(prepare_period_time $mode)
			fi
			
			eventsList[$(( lineNumber*3 + 1 ))]=$mode
			eventsList[$(( lineNumber*3 + 2 ))]=$text
			
			lineNumber=$(($lineNumber+1))
		fi
	done < "$fileWithSchedule"
	
	zenity --list --title "Lista wydarzeń" --column="Data" --column="Rodzaj" --column="Treść" "${eventsList[@]}" --width=384 --height=384
}

remove_events() {
	local lineNumber=0
	local line=""
	local eventsList=()
	while read line;
	do
		if [[ "$line" != "" ]]; then
			local timeStamp=`echo $line | sed -E 's/^([^ ]+) .*$/\1/g'`
			local mode=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) .*$/\2/g'`
			local text=`echo $line | sed -E 's/^([^ ]+) ([^ ]+) (.*)$/\3/g'`
			
			eventsList[$(( lineNumber*6 + 1 ))]=$lineNumber
			eventsList[$(( lineNumber*6 + 0 ))]=$timeStamp
			eventsList[$(( lineNumber*6 + 2 ))]=$mode
			
			eventsList[$(( lineNumber*6 + 3 ))]=$(prepare_date $timeStamp)
			if [[ "$mode" == "event" ]]; then
				mode="Wydarzenie jednorazowe"
			else
				mode="Wydarzenie okresowe: "$(prepare_period_time $mode)
			fi
			
			eventsList[$(( lineNumber*6 + 4 ))]=$mode
			eventsList[$(( lineNumber*6 + 5 ))]=$text
			
			lineNumber=$(($lineNumber+1))
		fi
	done < "$fileWithSchedule"
	local entries=$lineNumber
	
	local result=`zenity --list --checklist --title "Wybierz wydarzenia do usunięcia" "--column=" "--column=TimeStamp" "--column=HiddenMode" "--column=Data" "--column=Rodzaj" "--column=Treść" "${eventsList[@]}" --hide-column=2,3 --width=384 --height=384`
	
	if [[ "$result" != "" ]]; then
		local resultsArray=()
		IFS="|" read -r -a resultsArray <<< "$result" 
		
		local tmpFile=$(create_tmp_file_name)
		
		for line in $(seq 0 $entries);
		do
			local found="0"
			for element in "${resultsArray[@]}"
			do
				if [[ "$element" == "$line" ]]; then
					found="1"
				fi
			done
			if [[ "$found" == "0" ]]; then
				echo "${eventsList[$(( $line*6 + 0 ))]} ${eventsList[$(( $line*6 + 2 ))]} ${eventsList[$(( $line*6 + 5 ))]}" >> "$tmpFile"
			fi
		done
		
		mv "$tmpFile" "$fileWithSchedule"
	fi
}

get_number() {
	local number=""
	while [[ "1" == "1" ]]; do
		number=`zenity --entry --title "$1" --text="$2"`
		number=$(sed -z 's/\n/,/g;s/,$/\n/' <<< "$number")
		number=$(sed -n -E '/^([0-9]+)$/p' <<< "$number")
		if  [[ "$number" != "" ]]; then
			break;
		fi
		zenity --info --title "Błędna wartość" --text "Podana wartość nie jest liczbą całkowitą nie ujemną"
	done
	echo "$(($number + 0))"
}

add_event() {
	local date=`zenity --calendar --title "Data" --text="Wybierz datę wydarzenia" --date-format='%Y-%m-%d'`
	local hour=`zenity --scale --title "Godzina" --text="Wybierz godzinę wydarzenia" --min-value=0 --max-value=23 --step=1`
	local minute=`zenity --scale --title "Minuta" --text="Wybierz minutę wydarzenia" --min-value=0 --max-value=59 --step=1`
	while [[ "1" == "1" ]];
	do
		local text=`zenity --entry --title "Treść wydarzenia" --text="Napisz o czym jest wydarzenie"`
		text=$(sed -z 's/\n/,/g;s/,$/\n/' <<< "$text")
		if [[ "$text" != "" ]]; then
			break
		fi
		zenity --info --title "Błąd" --text "Opis wydarzenia nie może być pusty"
	done
	local mode="event"
	if zenity --question --title "Typ wydarzenia" --text="Czy wydarzenie ma być okresowe?"
	then
		while [[ "1" == "1" ]];
		do
			local years=`get_number "Lata" "Co ile lat ma się powtarzać wydarzenie?"`
			local months=`zenity --scale --title "Miesiące" --text="Co ile miesięcy ma się powtarzać wydarzenie?" --min-value=0 --max-value=11 --step=1`
			local days=`zenity --scale --title "Dni" --text="Co ile dni ma się powtarzać wydarzenie?" --min-value=0 --max-value=366 --step=1`
			local hours=`zenity --scale --title "Godziny" --text="Co ile godzin ma się powtarzać wydarzenie?" --min-value=0 --max-value=23 --step=1`
			local minutes=`zenity --scale --title "Minuty" --text="Co ile minut ma się powtarzać wydarzenie?" --min-value=0 --max-value=59 --step=1`
			mode="$years-$months-$days-$hours-$minutes"
			if [[ "$mode" != "0-0-0-0-0" ]]; then
				break
			fi
			zenity --info --title "Błąd" --text "Wprowadzony okres powtarzania wydarzenia jest zerowy, wprowadź inny okres."
		done
	fi
	date=$(prepare_period_time_full "$date-$hour-$minute")
	date=`date -d "$date" +%F-%H-%M`
	echo "$date $mode $text" >> "$fileWithSchedule"
}

is_daemon_running() {
	local daemonProcess=$(ps ax | grep 'organizer daemonloop' | grep -v "grep")
	if [[ "$daemonProcess" == "" ]]; then
		echo "0"
	else
		echo "1"
	fi
}

kill_daemon() {
	local daemonProcess=$(ps ax | grep 'organizer daemonloop' | grep -v "grep")
	local line=""
	while read line;
	do
		local daemonPID=`echo $line | sed -E 's/^[^0-9]*([0-9]+).*$/\1/g'`
		if [[ "$daemonPID" != "" ]]; then
			kill "$daemonPID"
		fi
	done <<< "$daemonProcess"
}

main_menu() {
	local menuList=()
	if [[ "$(is_daemon_running)" == "0" ]]; then
		menulist=("exit" "Wyjscie"  "ls" "Pokaz liste wydarzeń"  "rm" "Usuń wydarzenie"  "add" "Dodaj wydarzenie"  "startdaemon" "Uruchom daemona")
	else
		menulist=("exit" "Wyjście"  "killdaemon" "Wyłącz daemona - aby móc modyfikować lub wyświetlić listę wydarzeń")
	fi
	local option=`zenity --list --title "Main Menu" --column=Hidden --column=Opcje "${menulist[@]}" --hide-column=1 --height=300`
	case $option in
		"exit"|"")
			exit
			;;
		"ls")
			list_events
			;;
		"rm")
			remove_events
			;;
		"add")
			add_event
			;;
		"startdaemon")
			$0 startdaemon & > /dev/null 2>&1
			sleep 2
			;;
		"killdaemon")
			kill_daemon
			;;
	esac
}

make_sure_file_exists() {
	if [[ !(-d "$configPath") ]]; then
		mkdir "$configPath"
	fi
	if [[ !(-f "$fileWithSchedule") ]]; then
		echo > "$fileWithSchedule"
	fi
}
make_sure_file_exists

case $1 in
	"startdaemon")
		if [[ "$(is_daemon_running)" == "0" ]]; then
			$0 daemonloop
		fi
		;;
	"daemonloop")
		while [[ "1" == "1" ]]
		do
			daemon_function
		done
		;;
	"-v"|"--version"|"-V")
		echo "Organizer 1.0.0"
		echo "Created by Marek Zalewski s180465 PG ETI Student 2. semestru I stopnia kierunku Informatyki, grupa dziekańśka nr. 5, zajęcia pn_10"
		echo "Last commit: 18.05.2020"
		;;
	"-h"|"--help"|"?"|"help"|"-H")
		echo "To run type in terminal: $0"
		echo "Program is simple and self-explanatory in GUI"
		echo "If you want to run daemon manually, type in terminal: $0 startdaemon"
		;;
	*)
		while [[ "1" == "1" ]]
		do
			main_menu
		done
		;;
esac

